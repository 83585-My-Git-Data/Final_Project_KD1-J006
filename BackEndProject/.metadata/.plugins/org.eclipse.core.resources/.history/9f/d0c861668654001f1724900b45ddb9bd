package com.app.services;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.app.daos.AcademicDetailsDao;
import com.app.daos.AlumniDao;
import com.app.daos.UserDao;
import com.app.dto.LoginRequestDTO;
import com.app.dto.RegistrationRequestDTO;
import com.app.dto.UserDTO;
import com.app.entitites.AcademicDetails;
import com.app.entitites.Alumni;
import com.app.entitites.User;
import com.app.entitites.UserRole;

@Service
public class UserServiceImpl implements UserService 

{
    @Autowired
	private UserDao userDao;
    
    @Autowired
    private AcademicDetailsDao academicDetailsDao;
    
    @Autowired
    private AlumniDao alumniDao;
    
    @Autowired
    private ModelMapper modelmapper;
    
	@Override
	public User registerUser(UserDTO userDTO) {
		User user = modelmapper.map(userDTO,User.class);
		//user.setRole(UserRole.valueOf(userDTO.getRole()));
		
		return userDao.save(user);
	}
	

	@Override
	public UserDTO login(LoginRequestDTO loginRequest) {
		User user = userDao.findByEmailAndPassword(loginRequest.getEmail(), loginRequest.getPassword())
                .orElseThrow(() -> new RuntimeException("Invalid email or password"));
		return modelmapper.map(user, UserDTO.class);
	}


	@Override
	public UserDTO register(RegistrationRequestDTO registrationRequest) {
		
		User user = modelmapper.map(registrationRequest.getUserDTO(), User.class);
        User savedUser = userDao.save(user);

        // If user is an Alumni, create and save AcademicDetails and Alumni
        if (user.getRole() == UserRole.ALUMNI) {
            AcademicDetails academicDetails = modelmapper.map(registrationRequest.getAcademicDetailsDTO(), AcademicDetails.class);

            // Create and set Alumni
            Alumni alumni = new Alumni();
            alumni.setUser(savedUser);
            alumni.setAcademicDetails(academicDetails);

            // Save AcademicDetails first to get its ID
            AcademicDetails savedAcademicDetails = academicDetailsDao.save(academicDetails);
            alumni.setAcademicDetails(savedAcademicDetails);

            // Save Alumni
            alumniDao.save(alumni);
	
     
        return modelmapper.map(savedUser, UserDTO.class);


